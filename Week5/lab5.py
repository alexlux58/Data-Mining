# -*- coding: utf-8 -*-
"""Lab5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PgbVAeFUUi9L9IAg7kZJgvYBRejJMA8a
"""

'''
Lab 5
Rene Escamilla and Alex Lux
'''

######### Part 1 ###########


'''
    1-1) Download the iris-data-2 from Canvas, use pandas.read_csv to load it. This dataset has 5 input features: [sepal_length, sepal_width, petal_length, petal_width, color]
    1-2) Drop duplicate samples (use "ID" to find duplicates)
    1-3) Split your data into train(70% of data) and test(30% of data) via random selection (random_state = 32)
'''
import pandas as pd
from sklearn.model_selection import train_test_split

df = pd.read_csv('iris-data-2.csv') 
dfNew = df.drop_duplicates(subset=['ID'])
dfNew = pd.get_dummies(dfNew, columns=['color'])
dfDropped = dfNew.drop(columns=['color_Blue', 'color_Bluee', 'color_Nan', 'color_None', 'color_Red', 'color_U', 'color_none'])
X = dfDropped[["sepal_length", "sepal_width", "petal_length", "petal_width", "color_blue","color_pink","color_purple", "color_red"]]
y = dfDropped["species"]
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=32)
# print(x_train)
# print(y_train)

'''
    2-1) Train a KNN classifier for the (k = 5, metric='manhattan'). Did you encounter an error? what is the error? how can we fix it?
    Fix the error and train your model. (Hint: pandas.get_dummies())
    2-2) Test your classifier with the test set and report the results.
    2-3) Print the confusion matrix for the results on the test set. 
'''
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix

neigh = KNeighborsClassifier(n_neighbors=5, metric="manhattan")
# The error is that it could not convert string to float; for example 'vpink'
# It can be fixded with pandas.get_dummies()
neigh.fit(x_train, y_train) 
y_pred = neigh.predict(x_test)
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

'''
    3) Test your trained model with the given test set below and report the performance.
'''
import numpy as np
import pandas as pd

X_test = np.asarray([[5 , 1, 0.2 , 5,'red'],[0.9 , 7, 6.2 , 2.1,'red'], [0.9 , 7, 6.2 , 2.1,'pink'] , [1.9 , 4, 5 , 0.1,'purple'], [5.9 , 3.3, 0.2 , 2.7,'blue']])
Y_test = np.asarray(['virginica', 'virginica','virginica', 'versicolor' ,'setosa'])
X_test = pd.DataFrame(X_test)
# print(X_test)
Y_test = pd.Series(Y_test)
# print(Y_test)
X_test_new = pd.get_dummies(X_test, columns=[4])
# print(X_test_new)
# If columns are not renamed it throws error since column names have ints and strings; it must be only ints or strings.
X_test_new.rename({0:'sepal_length', 1:'sepal_width', 2: 'petal_length', 3: 'petal_width', '4_blue': 'color_blue', '4_pink': 'color_pink', '4_purple': 'color_purple', '4_red': 'color_red'}, axis=1, inplace=True)  # new method
# print(X_test_new)
y_pred_new = neigh.predict(X_test_new)
print(classification_report(Y_test, y_pred_new))
print(confusion_matrix(Y_test, y_pred_new))

'''
    4)  Use DictVectorizer from sklearn.feature_extraction to solve Q2
'''
from sklearn.feature_extraction import DictVectorizer
vec = DictVectorizer()
x_trainDV = vec.fit_transform(x_train.to_dict(orient='records'))
x_testDV = vec.transform(x_test.to_dict(orient='records'))
neigh.fit(x_trainDV, y_train)
predDV = neigh.predict(x_testDV)
print(classification_report(y_test, predDV))
print(confusion_matrix(y_test, predDV))

'''
    5)  Use OneHotEncoder and LabelEncoder from sklearn.preprocessing to solve Q2
'''
from sklearn.preprocessing import OneHotEncoder, LabelEncoder

le = LabelEncoder()
ohe = OneHotEncoder()

print(new_df, '\n')
new_df['color'] = le.fit_transform(new_df['color'])
print()
print(new_df, '\n')
X = ohe.fit_transform(new_df.color.values.reshape(-1,1)).toarray()
print(X, "\n")
print(new_df.shape[1], "\n")
df_ohe = pd.DataFrame(X, columns=["color_"+str(int(i)) for i in range(new_df.shape[1])])
df = pd.concat([X, df_ohe], axis=1)
df = df.drop(['color'], axis=1)
print(df.head())